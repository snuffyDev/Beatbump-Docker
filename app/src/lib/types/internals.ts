import type { CarouselItem } from "$lib/types";
import type { EndpointOutput } from "@sveltejs/kit";
import type { DefaultBody } from "@sveltejs/kit/types/endpoint";

export type TrendingEndpoint = {
	body: { carouselItems?: CarouselItem[] | JSONValue };
};

export interface EndpointParams {
	query: URLSearchParams;
}
// Generated by https://quicktype.io

// Generated by https://quicktype.io

export interface IMusicResponsiveListItemRenderer {
	trackingParams: string;
	thumbnail: IMusicResponsiveListItemRendererThumbnail;
	overlay: Overlay;
	flexColumns: FlexColumn[];
	menu: Menu;
	playlistItemData: PlaylistItemData;
	flexColumnDisplayStyle: string;
	itemHeight: string;
	customIndexColumn: CustomIndexColumn;
}

export interface CustomIndexColumn {
	musicCustomIndexColumnRenderer: MusicCustomIndexColumnRenderer;
}

export interface MusicCustomIndexColumnRenderer {
	text: SuccessResponseTextClass;
	accessibilityData: Accessibility;
}

export interface Accessibility {
	accessibilityData: AccessibilityData;
}

export interface AccessibilityData {
	label: string;
}

export interface SuccessResponseTextClass {
	runs: SuccessResponseTextRun[];
}

export interface SuccessResponseTextRun {
	text: string;
}

export interface FlexColumn {
	musicResponsiveListItemFlexColumnRenderer: MusicResponsiveListItemFlexColumnRenderer;
}

export interface MusicResponsiveListItemFlexColumnRenderer {
	text: MusicResponsiveListItemFlexColumnRendererText;
	displayPriority: string;
}

export interface MusicResponsiveListItemFlexColumnRendererText {
	runs?: PurpleRun[];
}

export interface PurpleRun {
	text: string;
	navigationEndpoint?: RunNavigationEndpoint;
}

export interface RunNavigationEndpoint {
	clickTrackingParams: string;
	watchEndpoint?: WatchEndpoint;
	browseEndpoint?: BrowseEndpoint;
}

export interface BrowseEndpoint {
	browseId: string;
	browseEndpointContextSupportedConfigs: BrowseEndpointContextSupportedConfigs;
}

export interface BrowseEndpointContextSupportedConfigs {
	browseEndpointContextMusicConfig: BrowseEndpointContextMusicConfig;
}

export interface BrowseEndpointContextMusicConfig {
	pageType: string;
}

export interface WatchEndpoint {
	videoId: string;
	playlistId: string;
	loggingContext: LoggingContext;
	watchEndpointMusicSupportedConfigs: WatchEndpointMusicSupportedConfigs;
	params?: string;
}

export interface LoggingContext {
	vssLoggingContext: VssLoggingContext;
}

export interface VssLoggingContext {
	serializedContextData: string;
}

export interface WatchEndpointMusicSupportedConfigs {
	watchEndpointMusicConfig: WatchEndpointMusicConfig;
}

export interface WatchEndpointMusicConfig {
	musicVideoType: string;
}

export interface Menu {
	menuRenderer: MenuRenderer;
}

export interface MenuRenderer {
	items: ItemElement[];
	trackingParams: string;
	topLevelButtons: TopLevelButton[];
	accessibility: Accessibility;
}

export interface ItemElement {
	menuNavigationItemRenderer?: MenuItemRenderer;
	menuServiceItemRenderer?: MenuItemRenderer;
}

export interface MenuItemRenderer {
	text: SuccessResponseTextClass;
	icon: Icon;
	navigationEndpoint?: MenuNavigationItemRendererNavigationEndpoint;
	trackingParams: string;
	serviceEndpoint?: MenuNavigationItemRendererServiceEndpoint;
}

export interface Icon {
	iconType: string;
}

export interface MenuNavigationItemRendererNavigationEndpoint {
	clickTrackingParams: string;
	watchEndpoint?: WatchEndpoint;
	addToPlaylistEndpoint?: PlaylistItemData;
	browseEndpoint?: BrowseEndpoint;
	shareEntityEndpoint?: ShareEntityEndpoint;
}

export interface PlaylistItemData {
	videoId: string;
}

export interface ShareEntityEndpoint {
	serializedShareEntity: string;
	sharePanelType: string;
}

export interface MenuNavigationItemRendererServiceEndpoint {
	clickTrackingParams: string;
	queueAddEndpoint: QueueAddEndpoint;
}

export interface QueueAddEndpoint {
	queueTarget: PlaylistItemData;
	queueInsertPosition: string;
	commands: Command[];
}

export interface Command {
	clickTrackingParams: string;
	addToToastAction: AddToToastAction;
}

export interface AddToToastAction {
	item: AddToToastActionItem;
}

export interface AddToToastActionItem {
	notificationTextRenderer: NotificationTextRenderer;
}

export interface NotificationTextRenderer {
	successResponseText: SuccessResponseTextClass;
	trackingParams: string;
}

export interface TopLevelButton {
	likeButtonRenderer: LikeButtonRenderer;
}

export interface LikeButtonRenderer {
	target: PlaylistItemData;
	likeStatus: string;
	trackingParams: string;
	likesAllowed: boolean;
	serviceEndpoints: ServiceEndpointElement[];
}

export interface ServiceEndpointElement {
	clickTrackingParams: string;
	likeEndpoint: LikeEndpoint;
}

export interface LikeEndpoint {
	status: string;
	target: PlaylistItemData;
}

export interface Overlay {
	musicItemThumbnailOverlayRenderer: MusicItemThumbnailOverlayRenderer;
}

export interface MusicItemThumbnailOverlayRenderer {
	background: Background;
	content: Content;
	contentPosition: string;
	displayStyle: string;
}

export interface Background {
	verticalGradient: VerticalGradient;
}

export interface VerticalGradient {
	gradientLayerColors: string[];
}

export interface Content {
	musicPlayButtonRenderer: MusicPlayButtonRenderer;
}

export interface MusicPlayButtonRenderer {
	playNavigationEndpoint: PlayNavigationEndpoint;
	trackingParams: string;
	playIcon: Icon;
	pauseIcon: Icon;
	iconColor: number;
	backgroundColor: number;
	activeBackgroundColor: number;
	loadingIndicatorColor: number;
	playingIcon: Icon;
	iconLoadingColor: number;
	activeScaleFactor: number;
	buttonSize: string;
	rippleTarget: string;
	accessibilityPlayData: Accessibility;
	accessibilityPauseData: Accessibility;
}

export interface PlayNavigationEndpoint {
	clickTrackingParams: string;
	watchEndpoint: WatchEndpoint;
}

export interface IMusicResponsiveListItemRendererThumbnail {
	musicThumbnailRenderer: MusicThumbnailRenderer;
}

export interface MusicThumbnailRenderer {
	thumbnail: MusicThumbnailRendererThumbnail;
	thumbnailCrop: string;
	thumbnailScale: string;
	trackingParams: string;
}

export interface MusicThumbnailRendererThumbnail {
	thumbnails: ThumbnailElement[];
}

export interface ThumbnailElement {
	url: string;
	width: number;
	height: number;
}

export interface IMusicTwoRowItemRenderer {
	thumbnailRenderer: ThumbnailRenderer;
	aspectRatio: string;
	title: Title;
	subtitle: Title;
	navigationEndpoint: IMusicTwoRowItemRendererNavigationEndpoint;
	trackingParams: string;
	menu: Menu;
	thumbnailOverlay: ThumbnailOverlay;
	subtitleBadges: SubtitleBadge[];
}

export interface Menu {
	menuRenderer: MenuRenderer;
}

export interface MenuRenderer {
	items: ItemElement[];
	trackingParams: string;
	accessibility: Accessibility;
}

export interface Accessibility {
	accessibilityData: AccessibilityData;
}

export interface AccessibilityData {
	label: string;
}

export interface ItemElement {
	menuNavigationItemRenderer?: MenuItemRenderer;
	menuServiceItemRenderer?: MenuItemRenderer;
	toggleMenuServiceItemRenderer?: ToggleMenuServiceItemRenderer;
}

export interface MenuItemRenderer {
	text: Text;
	icon: Icon;
	navigationEndpoint?: MenuNavigationItemRendererNavigationEndpoint;
	trackingParams: string;
	serviceEndpoint?: ServiceEndpoint;
}

export interface Icon {
	iconType: string;
}

export interface MenuNavigationItemRendererNavigationEndpoint {
	clickTrackingParams: string;
	watchPlaylistEndpoint?: NavigationEndpointWatchPlaylistEndpoint;
	addToPlaylistEndpoint?: WatchPlaylistEndpoint;
	browseEndpoint?: BrowseEndpoint;
	shareEntityEndpoint?: ShareEntityEndpoint;
}

export interface WatchPlaylistEndpoint {
	playlistId: string;
}

export interface BrowseEndpoint {
	browseId: string;
	browseEndpointContextSupportedConfigs: BrowseEndpointContextSupportedConfigs;
}

export interface BrowseEndpointContextSupportedConfigs {
	browseEndpointContextMusicConfig: BrowseEndpointContextMusicConfig;
}

export interface BrowseEndpointContextMusicConfig {
	pageType: string;
}

export interface ShareEntityEndpoint {
	serializedShareEntity: string;
	sharePanelType: string;
}

export interface NavigationEndpointWatchPlaylistEndpoint {
	playlistId: string;
	params: string;
}

export interface ServiceEndpoint {
	clickTrackingParams: string;
	queueAddEndpoint: QueueAddEndpoint;
}

export interface QueueAddEndpoint {
	queueTarget: WatchPlaylistEndpoint;
	queueInsertPosition: string;
	commands: Command[];
}

export interface Command {
	clickTrackingParams: string;
	addToToastAction: AddToToastAction;
}

export interface AddToToastAction {
	item: AddToToastActionItem;
}

export interface AddToToastActionItem {
	notificationTextRenderer: NotificationTextRenderer;
}

export interface NotificationTextRenderer {
	successResponseText: Text;
	trackingParams: string;
}

export interface Text {
	runs: TextRun[];
}

export interface TextRun {
	text: string;
}

export interface ToggleMenuServiceItemRenderer {
	defaultText: Text;
	defaultIcon: Icon;
	defaultServiceEndpoint: DefaultServiceEndpointClass;
	toggledText: Text;
	toggledIcon: Icon;
	toggledServiceEndpoint: DefaultServiceEndpointClass;
	trackingParams: string;
}

export interface DefaultServiceEndpointClass {
	clickTrackingParams: string;
	likeEndpoint: LikeEndpoint;
}

export interface LikeEndpoint {
	status: string;
	target: WatchPlaylistEndpoint;
}

export interface IMusicTwoRowItemRendererNavigationEndpoint {
	clickTrackingParams: string;
	browseEndpoint: BrowseEndpoint;
}

export interface Title {
	runs: SubtitleRun[];
}

export interface SubtitleRun {
	text: string;
	navigationEndpoint?: IMusicTwoRowItemRendererNavigationEndpoint;
}

export interface SubtitleBadge {
	musicInlineBadgeRenderer: MusicInlineBadgeRenderer;
}

export interface MusicInlineBadgeRenderer {
	trackingParams: string;
	icon: Icon;
	accessibilityData: Accessibility;
}

export interface ThumbnailOverlay {
	musicItemThumbnailOverlayRenderer: MusicItemThumbnailOverlayRenderer;
}

export interface MusicItemThumbnailOverlayRenderer {
	background: Background;
	content: Content;
	contentPosition: string;
	displayStyle: string;
}

export interface Background {
	verticalGradient: VerticalGradient;
}

export interface VerticalGradient {
	gradientLayerColors: string[];
}

export interface Content {
	musicPlayButtonRenderer: MusicPlayButtonRenderer;
}

export interface MusicPlayButtonRenderer {
	playNavigationEndpoint: PlayNavigationEndpoint;
	trackingParams: string;
	playIcon: Icon;
	pauseIcon: Icon;
	iconColor: number;
	backgroundColor: number;
	activeBackgroundColor: number;
	loadingIndicatorColor: number;
	playingIcon: Icon;
	iconLoadingColor: number;
	activeScaleFactor: number;
	buttonSize: string;
	rippleTarget: string;
	accessibilityPlayData: Accessibility;
	accessibilityPauseData: Accessibility;
}

export interface PlayNavigationEndpoint {
	clickTrackingParams: string;
	watchPlaylistEndpoint: WatchPlaylistEndpoint;
}

export interface ThumbnailRenderer {
	musicThumbnailRenderer: MusicThumbnailRenderer;
}

export interface MusicThumbnailRenderer {
	thumbnail: MusicThumbnailRendererThumbnail;
	thumbnailCrop: string;
	thumbnailScale: string;
	trackingParams: string;
}

export interface MusicThumbnailRendererThumbnail {
	thumbnails: ThumbnailElement[];
}

export interface ThumbnailElement {
	url: string;
	width: number;
	height: number;
}
